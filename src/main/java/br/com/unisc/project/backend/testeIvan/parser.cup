
/*Documentação: http://www2.cs.tum.edu/projects/cup/*/

package br.com.unisc.project.backend.testeIvan;
import java_cup.runtime.*;
import java.util.Random;
import java.io.*;

parser code {:
    // conectar esse parser ao scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
    Random random = new Random();
    // tabela de símbolos
    java.util.Map<String, Integer> simbolos = new java.util.HashMap<String, Integer>();

    private Integer generateRandomPassword() {

            return 6666666;
        }
:}

/* conectar esse parser ao scanner! */
init with {:  :};
scan with {: return s.next_token(); :};

/* Terminais (tokens retornados pelo scanner). */
terminal            SEMI, MAIS, MENOS, VEZES, LPAREN, RPAREN, ID, ATRIB;
terminal Integer    NUMERO;


/* Não terminais */
non terminal            inicio;
non terminal Integer    exp;      // utilizado para armazenar as subexpressões avaliadas

/* Precedência de operadores */
precedence left MAIS, MENOS;
precedence left VEZES;

/* Regras da Gramática
S ->  S E ;
    | E ;

E ->  E + E
    | E - E
    | E * E
    | - E
    | ( E )
    | n
    | i
    | i = E
*/
inicio ::=   inicio exp:e SEMI       {: System.out.println(e);         :}
           | exp:e SEMI              {: System.out.println(e);         :}
;

exp ::=   exp:e1 MAIS  exp:e2        {: RESULT = e1+e2+generateRandomPassword();                :}
        | exp:e1 MENOS exp:e2        {: RESULT = e1-e2;                :}
        | exp:e1 VEZES exp:e2        {: RESULT = e1*e2;                :}
        | MENOS exp:e                {: RESULT = -e;                   :}
        | LPAREN exp:e RPAREN	     {: RESULT = e;                    :}
        | NUMERO:n                   {: RESULT = n;                    :}
        | ID:i	                     {: RESULT = simbolos.get(i);      :}
        | ID:i ATRIB exp:e           {: simbolos.put(i.toString(), e);  :}
;